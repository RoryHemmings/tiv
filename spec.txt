############################
Terminal Image Viewer Spec
############################

The Terminal Image Viewer (TIV) is a more advanced version of the original Console
Image Viewer program. It is designed to run in the linux terminal, however it may well
be cross platform.

The core functionallity of the program takes an image and displays it in the console as
an ascii representation in the terminal. This is achieved by storing a list of characters
that take up increasingly more whitespace in their respective cells, and then mapping
pixels of the image to each of these cells.

The way this can be achieved varies and will include the following modes

Regular 							- just maps pixel intensity to character
Regular w/ shading    - same as regular, but also changes grayscale intensity of character
Regular w/ color 			- same as regular, but also changes color of each character
Block w/ shading			- keeps each character the same (■) but varies shading
Block w/ color				- keeps each character the same (■) but varies color

This program will function as an environment similar vim or emacs where there is a status
bar at the bottom of the screen that displays information. Keyboard shortcuts can be
pressed in order to modify the image being viewed.

The information displayed will include the following:

Image Path
Original Image Dimensions
Scaled Image Dimensions
Horizontal Scalar
Vertical Scalar

Keyboard Shortcuts will also include the following:

Scale the image
Scale the image horizontally
Scale the image vertically

Open a new file
Change the mode
Change the verbosity
Change the interpolation algorithm

Upon running the program, the image space will be blank. Once an image is opened, it will
automatically scale to fit as much space as it can without overflowing the window. From 
there, the user will be able to downscale the image either in both directions at once, or
one direction at a time. They should also be able to upscale it in the same fashion, 
unless this upscale exceeds the maximum window size. This size will be defined as the size 
of the window which should be updated when the terminal window changes size (handled by
the window object).

The verbosity is defined as how detailed the set of characters is. These character sets
can either reflect black pixels as high density characters such as @ or black pixels as
low density characters like *. This depends on whether or not the font is white or black.

All character sets (fonts) can be found here
http://paulbourke.net/dataformats/asciiart/

Whenever the window is resized, the image should be recreated with the current mode so that
its never bigger than the window.


###############
Program Design
###############

create application class - returns constant window pointer
implement window class
use nearest neighbor interpolation to return a string representing the space of character
get pictures working in grayscale


Possible Features:
Saving Art to a file
make range of colors between brightest and least bright pixels
